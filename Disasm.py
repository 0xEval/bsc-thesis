import subprocess
import argparse
import re
from capstone import Cs, CsError, CS_ARCH_X86, CS_MODE_32
from capstone.x86 import X86_OP_REG, X86_OP_IMM, X86_OP_FP, X86_OP_MEM
from xprint import to_hex, to_x, to_x_32


def extract_opcode(dump):
    opcode = ""
    for line in dump.splitlines():
        match = re.search(r' ([\da-f]+):\s+((?:[0-9a-f]{2} )+)', line)
        tmp = match.group(2).strip().split(' ')
        for op in tmp:
            opcode += op + ' '
    return opcode


def print_insn_detail(mode, insn):
    def print_string_hex(comment, str):
        print(comment, end=' ')
        for c in str:
            print("0x%02x " % c, end='')
        print()

    # print address, mnemonic and operands
    print("0x%x:\t%s\t%s" % (insn.address, insn.mnemonic, insn.op_str))

    # "data" instruction generated by SKIPDATA option has no detail
    if insn.id == 0:
        return

    # print instruction prefix
    print_string_hex("\tPrefix:", insn.prefix)

    # print instruction's opcode
    print_string_hex("\tOpcode:", insn.opcode)

    # print operand's REX prefix
    # (non-zero value is relavant for x86_64 instructions)
    print("\trex: 0x%x" % (insn.rex))

    # print operand's address size
    print("\taddr_size: %u" % (insn.addr_size))

    # print modRM byte
    print("\tmodrm: 0x%x" % (insn.modrm))

    # print displacement value
    print("\tdisp: 0x%s" % to_x_32(insn.disp))

    # SIB is not available in 16-bit mode
    # if (mode & CS_MODE_16 == 0):
    #    # print SIB byte
    #    print("\tsib: 0x%x" % (insn.sib))
    #    if (insn.sib):
    #        if insn.sib_base != 0:
    #            print("\t\tsib_base: %s" % (insn.reg_name(insn.sib_base)))
    #        if insn.sib_index != 0:
    #            print("\t\tsib_index: %s" % (insn.reg_name(insn.sib_index)))
    #        if insn.sib_scale != 0:
    #            print("\t\tsib_scale: %d" % (insn.sib_scale))

    count = insn.op_count(X86_OP_IMM)
    if count > 0:
        print("\timm_count: %u" % count)
        for i in range(count):
            op = insn.op_find(X86_OP_IMM, i + 1)
            print("\t\timms[%u]: 0x%s" % (i + 1, to_x(op.imm)))

    if len(insn.operands) > 0:
        print("\top_count: %u" % len(insn.operands))
        c = -1
        for i in insn.operands:
            c += 1
            if i.type == X86_OP_REG:
                print("\t\toperands[%u].type: REG = %s"
                      % (c, insn.reg_name(i.reg)))
            if i.type == X86_OP_IMM:
                print("\t\toperands[%u].type: IMM = 0x%s" % (c, to_x(i.imm)))
            if i.type == X86_OP_FP:
                print("\t\toperands[%u].type: FP = %f" % (c, i.fp))
            if i.type == X86_OP_MEM:
                print("\t\toperands[%u].type: MEM" % c)
                if i.mem.segment != 0:
                    print("\t\t\toperands[%u].mem.segment: REG = %s" %
                          (c, insn.reg_name(i.mem.segment)))
                if i.mem.base != 0:
                    print("\t\t\toperands[%u].mem.base: REG = %s"
                          % (c, insn.reg_name(i.mem.base)))
                if i.mem.index != 0:
                    print("\t\t\toperands[%u].mem.index: REG = %s" %
                          (c, insn.reg_name(i.mem.index)))
                if i.mem.scale != 1:
                    print("\t\t\toperands[%u].mem.scale: %u" %
                          (c, i.mem.scale))
                if i.mem.disp != 0:
                    print("\t\t\toperands[%u].mem.disp: 0x%s" %
                          (c, to_x(i.mem.disp)))

            print("\t\toperands[%u].size: %u" % (c, i.size))


def test_class():

    for (arch, mode, code, comment, syntax) in all_tests:
        print("*" * 16)
        print("Platform: %s" % comment)
        print("Code: %s" % to_hex(code))
        print("Disasm:")

        try:
            md = Cs(arch, mode)
            md.detail = True

            if syntax != 0:
                md.syntax = syntax

            for insn in md.disasm(code, 0x1000):
                print_insn_detail(mode, insn)
                print("")
        except CsError as e:
            print("ERROR: %s" % e)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='')
    parser.add_argument("target", help="path to target binary")
    args = parser.parse_args()
    target = args.target

    header_size = 7
    objdump = subprocess.check_output(
        ["objdump", "-d", "-M", "intel", target]
    )
    objdump = objdump.decode('utf-8')
    objdump = objdump.split('\n', header_size)[-1]

    print("*" * 16)
    print("Dumping: " + target + "\n%s" % objdump)
    opcode = extract_opcode(objdump)
    print("\nOpcode: %s" % opcode)

    X86_CODE32 = bytes.fromhex(opcode)

    all_tests = (
            (CS_ARCH_X86, CS_MODE_32, X86_CODE32, "X86 32 (Intel syntax)", 0),
    )

    test_class()
